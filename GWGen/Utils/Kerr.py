from GWGen.Utils import *
import numpy as np
from pyKerrFreqs import pyKerrGeoCoordinateFrequencies as KerrFreqs

class Kerr():
    def __init__(self, BHSpin=0.9):
        """
            calculate quantities relevant to Kerr orbital geodesics, assuming equatorial orbits:

            Analytic forms of expressions calculated using KerrGeodesic package from BlackHolePerturbationToolkit in Mathematica

            Energy: calculate energy of orbit, relative to BH mass
            AngularMomentum: calculate angular momentum
            Carter: calculate carter (equals zero, assuming equatorial orbits)
            dEdM: change in orbital energy due to change in spacetime mass
            dEdp: change in energy relative to semi-major axis
            dEde: change in energy relative to eccentricity
            dLdp: change in orbital angular momentum relative to semi-major axis
            dLde: change in orbital angular momentum relative to eccentricity
            OmegaR: calculate radial frequency
            OmegaPhi: calculate azimuthal frequency
            OmegaTheta: calculate polar frequency
        """
        self.a = BHSpin

    def Horizon_Frequency(self):
        val = self.a/(2*(1+(1-self.a**2)**(1/2)))
        return val


    def Energy(self):
        a = float(self.a)
        res = lambda e,p: Sqrt(1 - ((1 - e**2)*(1 + ((-1 + e**2)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)))/p)
        return res

    def AngularMomentum(self):
        a = float(self.a)
        res = lambda e,p: p*Sqrt((a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3)))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)) + a*Sqrt(1 - ((1 - e**2)*(1 + ((-1 + e**2)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)))/p)
        return res

    def Carter(self):
        a = float(self.a)
        res = lambda e,p: 0
        return res

    def dEdM(self):
        a = float(self.a)
        #Assumes equatorial orbits, Y=1
        res = lambda e,p: ((1 - e**2)*(-1 + ((-1 + e**2)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(4*a**2*(-1 + e**2)**2 - (3 + e**2 - p)**2*p) + ((-1 + e**2)*(16*a**2*(-1 + e**2)**2 - p*(e**4 + e**2*(6 - 4*p) + 3*(3 - 4*p + p**2)))*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)**2 + ((-1 + e**2)*(a**2*p + 4*a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3)) + (-9*a**6*(-1 + e**2)**2 + a**2*p**2*(-12 + 12*e**2 + 16*p - 5*p**2) - 2*a**4*p*(-12 + 7*p + e**2*(12 + 7*p)) + p**4*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))/(p**2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)))/(2.*p*Sqrt(1 - ((1 - e**2)*(1 + ((-1 + e**2)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)))/p))
        return res

    def dEda(self):
        a = float(self.a)
        #Assumes equatorial orbits, Y=1
        res = lambda e,p: -(((1 - e**2)*(-1 + e**2)*((-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)*(a*(1 + 3*e**2 + p) - (3*a**5*(-1 + e**2)**2 + a*(-4*e**2 + (-2 + p)**2)*p**2 + 4*a**3*p*(-2 + p + e**2*(2 + p)))/(p**2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))) + 4*a*(-1 + e**2)**2*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3)))))/(p*(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)**2*Sqrt(1 - ((1 - e**2)*(1 + ((-1 + e**2)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)))/p)))
        return res

    def dLdM(self):
        a = float(self.a)
        res = lambda e,p: (-2*p*Sqrt((a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3)))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)) + (p*((-16*a**2*(-1 + e**2)**2 + p*(e**4 + e**2*(6 - 4*p) + 3*(3 - 4*p + p**2)))*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))) - (-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)*(a**2*p + 4*a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3)) + (-9*a**6*(-1 + e**2)**2 + a**2*p**2*(-12 + 12*e**2 + 16*p - 5*p**2) - 2*a**4*p*(-12 + 7*p + e**2*(12 + 7*p)) + p**4*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))/(p**2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3)))))/((-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)**2*Sqrt((a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3)))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p))) + (a*(1 - e**2)*(-1 + ((-1 + e**2)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(4*a**2*(-1 + e**2)**2 - (3 + e**2 - p)**2*p) + ((-1 + e**2)*(16*a**2*(-1 + e**2)**2 - p*(e**4 + e**2*(6 - 4*p) + 3*(3 - 4*p + p**2)))*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)**2 + ((-1 + e**2)*(a**2*p + 4*a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3)) + (-9*a**6*(-1 + e**2)**2 + a**2*p**2*(-12 + 12*e**2 + 16*p - 5*p**2) - 2*a**4*p*(-12 + 7*p + e**2*(12 + 7*p)) + p**4*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))/(p**2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)))/(p*Sqrt(1 - ((1 - e**2)*(1 + ((-1 + e**2)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)))/p)) - 4*a*Sqrt(1 - ((1 - e**2)*(1 + ((-1 + e**2)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)))/p))/2

        return res

    def dLda(self):
        a = float(self.a)
        res = lambda e,p: (p*((-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)*(a*(1 + 3*e**2 + p) - (3*a**5*(-1 + e**2)**2 + a*(-4*e**2 + (-2 + p)**2)*p**2 + 4*a**3*p*(-2 + p + e**2*(2 + p)))/(p**2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))) + 4*a*(-1 + e**2)**2*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3)))))/((-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)**2*Sqrt((a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3)))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p))) - (a*(1 - e**2)*(-1 + e**2)*((-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)*(a*(1 + 3*e**2 + p) - (3*a**5*(-1 + e**2)**2 + a*(-4*e**2 + (-2 + p)**2)*p**2 + 4*a**3*p*(-2 + p + e**2*(2 + p)))/(p**2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))) + 4*a*(-1 + e**2)**2*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3)))))/(p*(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)**2*Sqrt(1 - ((1 - e**2)*(1 + ((-1 + e**2)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)))/p)) + Sqrt(1 - ((1 - e**2)*(1 + ((-1 + e**2)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)))/p)

        return res

    def dEdp(self):
        a = float(self.a)
        res = lambda e,p: ((1 - e**2)*(1 + ((-1 + e**2)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p) + ((-1 + e**2)*p*((3 + e**2 - 3*p)*(3 + e**2 - p)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))) + ((4*a**2*(-1 + e**2)**2 - (3 + e**2 - p)**2*p)*(a**6*(-1 + e**2)**2 - 2*a**4*(1 + e**2)*p**2 + p**3*(-3 - e**2 + 2*p)*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3) - a**2*p**2*(4 - 4*e**2 - 8*p + 3*p**2 - p*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(p**3*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)**2))/(2.*p**2*Sqrt(1 - ((1 - e**2)*(1 + ((-1 + e**2)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)))/p))
        return res

    def dEde(self):
        a = float(self.a)
        res = lambda e,p: (2*e*(1 + ((-1 + e**2)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)) - ((1 - e**2)*((-1 + e**2)*(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)*(6*a**2*e - 2*e*p - (4*a**2*e*(a**4*(-1 + e**2) - 2*p**2 + a**2*p*(2 + p)))/(p**2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))) - 4*e*(-1 + e**2)*(-4*a**2*(-1 + e**2) + (3 + e**2 - p)*p)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))) + 2*e*(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3)))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)**2)/(2.*p*Sqrt(1 - ((1 - e**2)*(1 + ((-1 + e**2)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)))/p))
        return res

    def dLdp(self):
        a = float(self.a)
        res = lambda e,p: Sqrt((a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3)))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)) + (p*(-((3 + e**2 - 3*p)*(3 + e**2 - p)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3)))) + ((-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)*(a**6*(-1 + e**2)**2 - 2*a**4*(1 + e**2)*p**2 + p**3*(-3 - e**2 + 2*p)*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3) - a**2*p**2*(4 - 4*e**2 - 8*p + 3*p**2 - p*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(p**3*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(2.*(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)**2*Sqrt((a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3)))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p))) + (a*(1 - e**2)*(1 + ((-1 + e**2)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p) + ((-1 + e**2)*p*((3 + e**2 - 3*p)*(3 + e**2 - p)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))) + ((4*a**2*(-1 + e**2)**2 - (3 + e**2 - p)**2*p)*(a**6*(-1 + e**2)**2 - 2*a**4*(1 + e**2)*p**2 + p**3*(-3 - e**2 + 2*p)*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3) - a**2*p**2*(4 - 4*e**2 - 8*p + 3*p**2 - p*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(p**3*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)**2))/(2.*p**2*Sqrt(1 - ((1 - e**2)*(1 + ((-1 + e**2)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)))/p))
        return res

    def dLde(self):
        a = float(self.a)
        res = lambda e,p: ((p*((-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)*(6*a**2*e - 2*e*p - (4*a**2*e*(a**4*(-1 + e**2) - 2*p**2 + a**2*p*(2 + p)))/(p**2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))) - 4*e*(-4*a**2*(-1 + e**2) + (3 + e**2 - p)*p)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3)))))/((-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)**2*Sqrt((a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3)))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p))) + (a*(2*e*(1 + ((-1 + e**2)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)) - ((1 - e**2)*((-1 + e**2)*(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)*(6*a**2*e - 2*e*p - (4*a**2*e*(a**4*(-1 + e**2) - 2*p**2 + a**2*p*(2 + p)))/(p**2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))) - 4*e*(-1 + e**2)*(-4*a**2*(-1 + e**2) + (3 + e**2 - p)*p)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))) + 2*e*(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3)))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)**2))/(p*Sqrt(1 - ((1 - e**2)*(1 + ((-1 + e**2)*(a**2*(1 + 3*e**2 + p) + p*(-3 - e**2 + p - 2*Sqrt((a**6*(-1 + e**2)**2 + a**2*(-4*e**2 + (-2 + p)**2)*p**2 + 2*a**4*p*(-2 + p + e**2*(2 + p)))/p**3))))/(-4*a**2*(-1 + e**2)**2 + (3 + e**2 - p)**2*p)))/p)))/2.
        return res


    def OrbitalFrequencies(self):
        res = lambda e,p,x: KerrFreqs(self.a, p,e,x)
        return res
